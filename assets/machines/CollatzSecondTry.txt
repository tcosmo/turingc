; cz stands for counter zone
cz_start_bouncing:
    0, L, bounce_check_second_bit_and_modify
    1, L, bounce_check_second_bit_and_modify

bounce_check_second_bit_and_modify:
    1, L, bounce_hold_0_read_first_bit
    0, L, bounce_hold_1_read_first_bit

; Holding a 0
    bounce_hold_0_check_second_bit_0:
        0, L, bounce_hold_0_read_first_bit
; also copies a zero
        0, L, expand 

    bounce_hold_0_check_second_bit_1:
        0, L, bounce_hold_0_read_first_bit
        1, L, bounce_hold_0_read_first_bit

    bounce_hold_0_read_first_bit:
        0, L, bounce_hold_0_check_second_bit_0
        1, L, bounce_hold_0_check_second_bit_1

; Holding a 1
    bounce_hold_1_read_first_bit:
        0, L, bounce_hold_1_check_second_bit_0
        1, L, bounce_hold_1_check_second_bit_1

    bounce_hold_1_rewrite_bit_1:
        1, L, bounce_hold_1_rewrite_bit_1_ignore
        -
    
    bounce_hold_1_rewrite_bit_1_ignore:
        0, L, expand
        1, L, expand

    bounce_hold_1_check_second_bit_0:
        0, L, bounce_hold_1_read_first_bit
        1, R, bounce_hold_1_rewrite_bit_1

    bounce_hold_1_check_second_bit_1:
        0, L, bounce_hold_1_read_first_bit
        1, L, bounce_hold_1_read_first_bit    

expand:
    0, L, expand_bis
    0, L, expand_bis

expand_bis:
    1, R, rewind_ignore
    1, R, rewind_ignore

rewind_ignore:
    0, R, rewind
    1, R, rewind

rewind_check_bit_0:
    0, R, rewind
    1, R, bounce_back

rewind_check_bit_1:
    0, R, bounce_back_Collatz
    1, R, rewind

rewind:
    0, R, rewind_check_bit_0
    1, R, rewind_check_bit_1

bounce_back_check_second_bit_0:
    0, R, bounce_back
    1, L, bounce_back_check_copy_ignore

bounce_back_check_second_bit_1:
    0, L, bounce_back_check_copy_ignore
    1, R, bounce_back

bounce_back:
    0, R, bounce_back_check_second_bit_0
    1, R, bounce_back_check_second_bit_1

; could be also used to write back the bit
bounce_back_check_copy_ignore:
    0, L, bounce_back_check_copy
    1, L, bounce_back_check_copy

bounce_back_check_copy:
    0, L, bounce_back_check_copy_bit_0
    1, L, bounce_back_check_copy_bit_1

bounce_back_check_copy_bit_0:
    0, R, cz_start_bouncing
    -

bounce_back_check_copy_bit_1:
    1, R, bounce_back_Collatz_ignore
    1, R, cz_start_bouncing

bounce_back_Collatz_ignore:
    -
    0, R, bounce_back_Collatz

bounce_back_Collatz:
    0, R, bounce_back_Collatz_check_second_bit_0
    1, R, bounce_back_Collatz_check_second_bit_1

bounce_back_Collatz_check_second_bit_0:
    0, R, bounce_back_Collatz
    0, R, check_if_one_more_iteration

bounce_back_Collatz_check_second_bit_1:
    1, R, check_if_one_more_iteration
    1, R, bounce_back_Collatz

check_if_one_more_iteration:
    0, L, wait_for_Collatz
    1, R, check_if_one_more_iteration_bis

check_if_one_more_iteration_bis:
    0, L, wait_for_Collatz_ignore
    -

wait_for_Collatz_ignore:
    0, L, wait_for_Collatz
    1, L, wait_for_Collatz

wait_for_Collatz:
    0, L, wait_for_Collatz_check_second_bit_0
    1, L, wait_for_Collatz_ignore

wait_for_Collatz_check_second_bit_0:
    0, L, wait_for_Collatz
    1, L, Collatz_start_ignore_trailing_zeros

Collatz_start_ignore_trailing_zeros:
    0, L, Collatz_start_ignore_trailing_zeros
    0, L, Collatz_state_0_carry_1_read_1

Collatz_state_0_carry_0:
    0, L, Collatz_state_0_carry_0_read_0
    1, L, Collatz_state_0_carry_0_read_1

Collatz_state_0_carry_0_read_0:
    0, L, Collatz_state_0_carry_0
    -

Collatz_state_0_carry_0_read_1:
    -
    1, L, Collatz_state_1_carry_0

Collatz_state_0_carry_1:
    1, L, Collatz_state_0_carry_1_read_0
    0, L, Collatz_state_0_carry_1_read_1

Collatz_state_0_carry_1_read_0:
    1, L, Collatz_state_0_carry_0
    1, L, expand

Collatz_state_0_carry_1_read_1:
; we use this first rw-instruction to write the ending pattern of 1 with a carry
    1, L, expand
    0, L, Collatz_state_1_carry_1

Collatz_state_1_carry_0:
    1, L, Collatz_state_1_carry_0_read_0
    0, L, Collatz_state_1_carry_0_read_1

Collatz_state_1_carry_0_read_0:
    1, L, Collatz_state_0_carry_0
    1, L, expand

Collatz_state_1_carry_0_read_1:
; we use this first rw-instruction to write the ending pattern of 1 with a carry
    1, L, Collatz_state_0_carry_1_read_1
    0, L, Collatz_state_1_carry_1

Collatz_state_1_carry_1:
    0, L, Collatz_state_1_carry_1_read_0
    1, L, Collatz_state_1_carry_1_read_1

Collatz_state_1_carry_1_read_0:
    0, L, Collatz_state_0_carry_1
    0, L, Collatz_state_1_carry_0_read_1

Collatz_state_1_carry_1_read_1:
    -
    1, L, Collatz_state_1_carry_1